name: Node.js CI Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 20.x ]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Client-side checking
        run: |
          cd client
          rm -rf node_modules
          npm install
          npm run build --if-present || true 

      - name: Server-side checking
        run: |
          cd server
          rm -rf node_modules
          npm install
          npm run build --if-present || true  

      - name: Run tests
        run: npm test || true

  # In this job, we log in to the docker-hub user, scan the containers for vulnerabilities
  # container scan and secret detection, then, we push the multi-image application to docker-hub.
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Container scan + Secret Detection scan for both server and client
      - name: Scan server image for vulnerabilities
        uses: crazy-max/ghaction-container-scan@v3
        with:
          image: avivnat13/devops_project-server:latest
          dockerfile: ./server/Dockerfile

      - name: Upload SARIF file for server
        if: ${{ steps.scan.outputs.sarif != '' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

      - name: Scan client image for vulnerabilities
        uses: crazy-max/ghaction-container-scan@v3
        with:
          image: avivnat13/devops_project-client:latest
          dockerfile: ./client/Dockerfile

      - name: Upload SARIF file for client
        if: ${{ steps.scan.outputs.sarif != '' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

      - name: Build and push Docker images
        run: |
          docker-compose build
          docker-compose push
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}

      - name: Run the application using docker
        run: |
          docker-compose up -d

      # Runs the tests that we created in this section.
      - name: Configure the test environment to run all the tests
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install packages
        run: pip install  selenium pytest

      - name: Install requirements
        run: |
          #          cd tests
               pip install -r tests/requirements.txt
      - name: Run tests on the deployed docker application (not in production yet)
        run: |
          cd tests 
          pytest -rA # Used for recursion checking for 'test_' template that pytest depend on.