name: Node.js CI Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 20.x ]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build the project
        run: npm run build --if-present || true

      - name: Client-side checking
        run: |
          cd client
          rm -rf node_modules
          npm install
          npm run build --if-present || true 

      - name: Server-side checking
        run: |
          cd server
          rm -rf node_modules
          npm install
          npm run build --if-present || true  

      - name: Run tests
        run: npm test || true

  docker: # After the test, we can continue to push the image to dockerhub, and move on to the CD process.
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        run: |
          docker-compose build
          docker-compose push
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}

      # Container scan for both server and client
      - name: Scan server image for vulnerabilities
        uses: crazy-max/ghaction-container-scan@v3
        with:
          image: avivnat13/devops_project-server:latest

      - name: Scan client image for vulnerabilities
        uses: crazy-max/ghaction-container-scan@v3
        with:
          image: avivnat13/devops_project-client:latest

        #      - name: Get machine IP address
      #        id: get_ip
      #        run: echo "HOST_IP=$(curl -s http://checkip.amazonaws.com)" >> $GITHUB_ENV
      #
      #      - name: Run Docker Compose to start application
      #        run: docker-compose up -d --build
      #        env:
      #          MONGO_URI: ${{ secrets.MONGO_URI }}
      #          JWT_SECRET: ${{ secrets.JWT_SECRET }}
      #          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
      #          JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
      #          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      #

