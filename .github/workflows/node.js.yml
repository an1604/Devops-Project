name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 20.x ]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build the project
        run: npm run build --if-present || true

      - name: Client-side checking
        run: |
          cd client
          npm ci
          npm run build --if-present || true 

      - name: Server-side checking
        run: |
          cd server
          npm ci
          npm run build --if-present || true  

      - name: Run tests
        run: npm test || true



  #  snyk_monitorscan:
  #    needs: build
  #    runs-on: ubuntu-latest
  #
  #    steps:
  #      - name: Checkout code
  #        uses: actions/checkout@v4
  #
  #      - name: Run Snyk to check for vulnerabilities
  #        uses: snyk/actions/node@master
  #        continue-on-error: true
  #        env:
  #          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #        with:
  #          command: monitor
  #          json: true
  #
  #      - name: Upload Snyk Report
  #        uses: actions/upload-artifact@v4
  #        with:
  #          name: snyk-report
  #          path: snyk.sarif

  docker:
    #    needs: snyk_monitorscan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image for client
        uses: docker/build-push-action@v4
        with:
          context: ./client
          dockerfile: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/devops_project-client:latest

      - name: Build and push Docker image for server
        uses: docker/build-push-action@v4
        with:
          context: ./server
          dockerfile: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/devops_project-server:latest



  dast: # Dynamic application security testing section.
    runs-on: ubuntu-latest
    needs: docker

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start Docker Compose
        run: docker-compose up -d --build
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}

      - name: Scan the web application
        uses: zaproxy/action-baseline@v0.6.1
        with:
          docker_name: 'ictu/zap2docker-weekly'
          target: "http://localhost:5173" # The URL of the running application
#          rules_file_name: '.zap/rules.tsv' # Tells ZAP to use this rule filename for a set of rules defined in the repo
          cmd_options: '-a'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Stop Docker Compose
        run: docker-compose down

#  deploy:
#    needs: docker
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Install dependencies
#        run: |
#          sudo apt-add-repository ppa:ansible/ansible
#          sudo apt-get update
#          sudo apt-get install -y ansible
#          sudo apt-get install -y python3-pip
#          python3 -m pip install --upgrade pip
#          pip3 install ansible==6.7.0 requests botocore boto boto3
#
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
#
#      - name: Install SSH Key
#        uses: shimataro/ssh-key-action@v2
#        with:
#          key: ${{ secrets.PRIVATE_KEY }}
#          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
#
#      - name: Run playbook
#        run: |
#          ansible-playbook ansible/deploy_calc.yml --ssh-common-args='-o StrictHostKeyChecking=no'
