version: '3.8' # The version of Docker Compose file format

services:
  # Client service definition
  client:
    build:
      context: ./client # Path to the directory containing the Dockerfile for the client
      dockerfile: Dockerfile # Dockerfile to use for building the client image
    image: avivnat13/devops_project-client:latest
    ports:
      - "5173:5173" # Map port 5173 on the host to port 5173 on the client container
    depends_on:
      - api # Ensure the client service starts after the api service
    networks:
      - node-network # Connect the client service to the node-network

  # API service definition
  api:
    build:
      context: ./server # Path to the directory containing the Dockerfile for the API
      dockerfile: Dockerfile # Dockerfile to use for building the API image
    image: avivnat13/devops_project-server:latest
    ports:
      - "5000:5000" # Map port 5000 on the host to port 5000 on the API container
    depends_on:
      - mongodb # Ensure the API service starts after the mongodb service
    environment:
      - MONGO_URI
      - JWT_SECRET
      - JWT_REFRESH_SECRET
      - JWT_EXPIRATION
      - GOOGLE_CLIENT_ID
    networks:
      - node-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:5000 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy service definition
  reverseproxy:
    build:
      context: ./reverseproxy
      dockerfile: Dockerfile
    image: avivnat13/reverseproxy:latest
    ports:
      - "80:80"
    depends_on:
      - client
    networks:
      - node-network

  # MongoDB service definition
  mongodb:
    image: mongo:6-jammy # Use the official MongoDB image version 6-jammy
    ports:
      - '27017:27017' # Map port 27017 on the host to port 27017 on the MongoDB container
    volumes:
      - dbdata6:/data/db # Mount the volume dbdata6 to /data/db in the container for persistent storage
    networks:
      - node-network
    healthcheck:
      test: [ "CMD-SHELL", "mongosh --eval 'db.adminCommand('ping')' || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3


volumes:
  dbdata6:

networks:
  node-network:
    driver: bridge # Use the bridge driver to create an isolated network for the containers
